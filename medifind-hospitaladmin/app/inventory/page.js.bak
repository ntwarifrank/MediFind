'use client';

import { useState, useEffect } from 'react';
import axios from 'axios';
import DashboardLayout from '../../components/layout/DashboardLayout';
import { useAuth } from '../../context/AuthContext';

export default function InventoryPage() {
  const { user } = useAuth();
  const hospitalId = user?.hospitalId;
  
  const [activeTab, setActiveTab] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedItem, setSelectedItem] = useState(null);
  const [showOrderModal, setShowOrderModal] = useState(false);
  const [orderQuantity, setOrderQuantity] = useState(1);
  const [showAddItemModal, setShowAddItemModal] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [inventoryItems, setInventoryItems] = useState([]);
  
  // New item form state
  const [newItem, setNewItem] = useState({
    name: '',
    category: 'PPE',
    subcategory: '',
    currentStock: 0,
    unit: 'pieces',
    minStockLevel: 0,
    reorderPoint: 0,
    status: 'In Stock',
    location: '',
    expiryDate: '',
    supplier: '',
    price: 0,
    description: '',
    batchNumber: ''
  });
  
  // Fetch inventory items from backend API
  useEffect(() => {
    if (!hospitalId) return;
    
    const fetchInventory = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get('/api/inventory', {
          params: { hospital: hospitalId }
        });
        setInventoryItems(response.data.data.inventory || []);
        setError(null);
      } catch (err) {
        console.error('Error fetching inventory:', err);
        setError('Failed to load inventory items. Please try again later.');
        // Fallback to sample data for demo purposes
        setInventoryItems([
          {
            id: 'INV-001',
            name: 'Surgical Masks',
            category: 'PPE',
            subcategory: 'Face Protection',
            currentStock: 1250,
            unit: 'pieces',
            minStockLevel: 500,
            reorderPoint: 800,
            status: 'In Stock',
            location: 'Main Storage - Shelf A3',
            lastRestocked: '2023-10-15',
            expiryDate: '2025-10-15',
            supplier: 'MedSupply Inc.',
            price: 0.50,
            description: 'Disposable 3-ply surgical masks for medical use',
            image: '/images/surgical-mask.jpg',
            usageRate: '~200/week',
            batchNumber: 'SM-2023-10-15',
          }
          // Add more items as needed
        ]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchInventory();
  }, [hospitalId]);

  // Filter function
  const filteredItems = inventoryItems.filter(item => {
    // Filter by search term
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
                         item.id.toLowerCase().includes(searchTerm.toLowerCase());
    
    // Filter by category
    const matchesCategory = categoryFilter === 'all' || item.category === categoryFilter;
    
    // Filter by status
    const matchesStatus = statusFilter === 'all' || item.status === statusFilter;
    
    // Filter by tab
    let matchesTab = true;
    if (activeTab === 'low-stock') {
      matchesTab = item.currentStock <= item.reorderPoint;
    } else if (activeTab === 'expiring-soon') {
      // Check if expiry date is within 3 months
      if (item.expiryDate) {
        const expiryDate = new Date(item.expiryDate);
        const threeMonthsFromNow = new Date();
        threeMonthsFromNow.setMonth(threeMonthsFromNow.getMonth() + 3);
        matchesTab = expiryDate <= threeMonthsFromNow;
      } else {
        matchesTab = false;
      }
    }
    
    return matchesSearch && matchesCategory && matchesStatus && matchesTab;
  });

  // Helper functions
  const getStockStatusClass = (status) => {
    switch(status) {
      case 'In Stock': return 'text-green-600 bg-green-100';
      case 'Low Stock': return 'text-yellow-600 bg-yellow-100';
      case 'Out of Stock': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price);
  };

  const handleOrderSubmit = () => {
    // In a real application, this would send an order to the backend
    alert(`Order placed for ${orderQuantity} ${selectedItem.unit} of ${selectedItem.name}`);
    setShowOrderModal(false);
    setSelectedItem(null);
    setOrderQuantity(1);
  };
  
  // Form handlers for Add Item
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewItem({
      ...newItem,
      [name]: value
    });
  };
  
  const handleNumberInputChange = (e) => {
    const { name, value } = e.target;
    setNewItem({
      ...newItem,
      [name]: parseFloat(value) || 0
    });
  };
  
  const handleAddItem = async (e) => {
    e.preventDefault();
    
    // Generate a unique ID for the new item
    const newId = `INV-${String(inventoryItems.length + 1).padStart(3, '0')}`;
    const itemWithId = { ...newItem, id: newId, hospitalId: hospitalId };
    
    try {
      // Send the new item to the backend API
      setIsLoading(true);
      const response = await axios.post('/api/inventory', itemWithId);
      
      // Update local state with the new item
      setInventoryItems([...inventoryItems, response.data.data.item]);
      console.log('Added new inventory item:', response.data.data.item);
    } catch (err) {
      console.error('Error adding inventory item:', err);
      alert('Failed to add inventory item. Please try again.');
    } finally {
      setIsLoading(false);
    }
    
    // Reset form and close modal
    setNewItem({
      name: '',
      category: 'PPE',
      subcategory: '',
      currentStock: 0,
      unit: 'pieces',
      minStockLevel: 0,
      reorderPoint: 0,
      status: 'In Stock',
      location: '',
      expiryDate: '',
      supplier: '',
      price: 0,
      description: '',
      batchNumber: ''
    });
    setShowAddItemModal(false);
  };

  return (
    <DashboardLayout title="Inventory Management">
      <div className="space-y-6">
        {/* Header with actions */}
        <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
          <div>
            <h2 className="text-xl font-semibold text-DarkBlue">Inventory</h2>
            <p className="text-mainGray">Manage medical supplies and equipment</p>
          </div>
          <button 
            onClick={() => setShowAddItemModal(true)}
            className="bg-gradient-to-r from-mainBlue to-deepBlue text-white px-4 py-2 rounded-lg flex items-center justify-center hover:shadow-lg transition-all duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Add New Item
          </button>
        </div>
        
        {/* Dashboard Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
            <div className="flex items-center">
              <div className="h-12 w-12 rounded-lg bg-mainBlue/10 flex items-center justify-center text-mainBlue">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-sm font-medium text-mainGray">Total Items</h3>
                <p className="text-xl font-semibold text-DarkBlue">{inventoryItems.length}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
            <div className="flex items-center">
              <div className="h-12 w-12 rounded-lg bg-deepBlue/10 flex items-center justify-center text-deepBlue">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-sm font-medium text-mainGray">Low Stock Items</h3>
                <p className="text-xl font-semibold text-DarkBlue">{inventoryItems.filter(item => item.currentStock <= item.reorderPoint).length}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
            <div className="flex items-center">
              <div className="h-12 w-12 rounded-lg bg-red-100 flex items-center justify-center text-red-500">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-sm font-medium text-mainGray">Expiring Soon</h3>
                <p className="text-xl font-semibold text-DarkBlue">
                  {inventoryItems.filter(item => {
                    if (item.expiryDate) {
                      const expiryDate = new Date(item.expiryDate);
                      const threeMonthsFromNow = new Date();
                      threeMonthsFromNow.setMonth(threeMonthsFromNow.getMonth() + 3);
                      return expiryDate <= threeMonthsFromNow;
                    }
                    return false;
                  }).length}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
            <div className="flex items-center">
              <div className="h-12 w-12 rounded-lg bg-green-100 flex items-center justify-center text-green-500">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-sm font-medium text-mainGray">Total Value</h3>
                <p className="text-xl font-semibold text-DarkBlue">
                  {formatPrice(inventoryItems.reduce((total, item) => total + (item.price * item.currentStock), 0))}
                </p>
              </div>
            </div>
          </div>
        </div>
        
        {/* Tabs and Filters */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-4">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0">
            {/* Tabs */}
            <div className="flex space-x-4 overflow-x-auto pb-2 md:pb-0">
              <button
                onClick={() => setActiveTab('all')}
                className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === 'all' 
                    ? 'bg-mainBlue text-white' 
                    : 'text-mainGray hover:bg-whiteGray'
                }`}
              >
                All Items
              </button>
              <button
                onClick={() => setActiveTab('low-stock')}
                className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === 'low-stock' 
                    ? 'bg-mainBlue text-white' 
                    : 'text-mainGray hover:bg-whiteGray'
                }`}
              >
                Low Stock
              </button>
              <button
                onClick={() => setActiveTab('expiring-soon')}
                className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === 'expiring-soon' 
                    ? 'bg-mainBlue text-white' 
                    : 'text-mainGray hover:bg-whiteGray'
                }`}
              >
                Expiring Soon
              </button>
            </div>
            
            {/* Search and Filters */}
            <div className="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2 w-full md:w-auto">
              <div className="relative flex-grow md:flex-grow-0">
                <input
                  type="text"
                  placeholder="Search items..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50 w-full md:w-64"
                />
                <div className="absolute left-3 top-2.5 text-mainGray">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>
              
              <div className="grid grid-cols-2 md:flex gap-2 w-full md:w-auto">
                <select
                  value={categoryFilter}
                  onChange={(e) => setCategoryFilter(e.target.value)}
                  className="px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50 bg-white"
                >
                  <option value="all">All Categories</option>
                  <option value="PPE">PPE</option>
                  <option value="Equipment">Equipment</option>
                  <option value="Supplies">Supplies</option>
                  <option value="Medication">Medication</option>
                </select>
                
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50 bg-white"
                >
                  <option value="all">All Status</option>
                  <option value="In Stock">In Stock</option>
                  <option value="Low Stock">Low Stock</option>
                  <option value="Out of Stock">Out of Stock</option>
                </select>
              </div>
              
              <button 
                onClick={() => setShowAddItemModal(true)}
                className="px-4 py-2 bg-mainBlue text-white rounded-lg hover:bg-mainBlue/90 transition-colors flex items-center justify-center whitespace-nowrap"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Add Item
              </button>
            </div>
          </div>
        </div>
        
        {/* Inventory Table */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
          {isLoading ? (
            <div className="flex justify-center items-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-mainBlue"></div>
            </div>
          ) : error ? (
            <div className="text-center py-12 text-red-500">
              <p>{error}</p>
              <button 
                onClick={() => window.location.reload()} 
                className="mt-2 text-mainBlue hover:underline"
              >
                Try again
              </button>
            </div>
          ) : (
            <div className="responsive-table responsive-table-container">
              <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-whiteGray">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">
                    Item
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">
                    Category
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">
                    Stock
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">
                    Status
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider hidden md:table-cell">
                    Last Restocked
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredItems.length > 0 ? (
                  filteredItems.map((item, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="h-10 w-10 rounded-lg bg-mainBlue/10 flex items-center justify-center text-mainBlue font-bold">
                            {item.name.charAt(0)}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-DarkBlue">{item.name}</div>
                            <div className="text-xs text-mainGray">{item.id}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-DarkBlue">{item.category}</div>
                        <div className="text-xs text-mainGray">{item.subcategory}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-DarkBlue">{item.currentStock} {item.unit}</div>
                        <div className="text-xs text-mainGray">Min: {item.minStockLevel}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStockStatusClass(item.status)}`}>
                          {item.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-DarkBlue hidden md:table-cell">
                        {item.lastRestocked}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex space-x-2">
                          <button 
                            onClick={() => setSelectedItem(item)}
                            className="text-mainBlue hover:text-deepBlue transition-colors"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          </button>
                          <button 
                            onClick={() => {
                              setSelectedItem(item);
                              setShowOrderModal(true);
                            }}
                            className="text-deepBlue hover:text-mainBlue transition-colors"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                          </svg>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="6" className="px-6 py-4 text-center text-sm text-mainGray">
                    No items found matching your filters.
                  </td>
                </tr>
              )}
              </tbody>
            </table>
          </div>
          )}
          
          {/* Pagination */}
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div className="flex-1 flex justify-between sm:hidden">
              <button className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-mainGray bg-white hover:bg-gray-50">
                Previous
              </button>
              <button className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-mainGray bg-white hover:bg-gray-50">
                Next
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-mainGray">
                  Showing <span className="font-medium">1</span> to <span className="font-medium">{filteredItems.length}</span> of{' '}
                  <span className="font-medium">{filteredItems.length}</span> results
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-mainGray hover:bg-gray-50">
                    <span className="sr-only">Previous</span>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <button aria-current="page" className="z-10 bg-mainBlue border-mainBlue text-white relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                    1
                  </button>
                  <button className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-mainGray hover:bg-gray-50">
                    <span className="sr-only">Next</span>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                    </svg>
                  </button>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Item Details Modal */}
      {selectedItem && !showOrderModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-100 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-DarkBlue">Item Details</h3>
              <button 
                className="text-mainGray hover:text-DarkBlue"
                onClick={() => setSelectedItem(null)}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-6">
              <div className="flex flex-col md:flex-row gap-6">
                {/* Item Info */}
                <div className="w-full md:w-1/3">
                  <div className="flex flex-col items-center">
                    <div className="h-32 w-32 rounded-lg bg-gradient-to-r from-mainBlue to-deepBlue flex items-center justify-center text-white text-4xl font-bold mb-4">
                      {selectedItem.name.charAt(0)}
                    </div>
                    <h4 className="text-xl font-semibold text-DarkBlue mb-1">{selectedItem.name}</h4>
                    <p className="text-sm text-mainGray mb-4">{selectedItem.id}</p>
                    
                    <div className="w-full space-y-4 mt-2">
                      <div className="bg-whiteGray p-4 rounded-lg">
                        <h5 className="text-md font-semibold text-DarkBlue mb-2">Stock Information</h5>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-sm text-mainGray">Current Stock:</span>
                            <span className="text-sm font-medium text-DarkBlue">{selectedItem.currentStock} {selectedItem.unit}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-mainGray">Minimum Level:</span>
                            <span className="text-sm font-medium text-DarkBlue">{selectedItem.minStockLevel} {selectedItem.unit}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-mainGray">Reorder Point:</span>
                            <span className="text-sm font-medium text-DarkBlue">{selectedItem.reorderPoint} {selectedItem.unit}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-mainGray">Status:</span>
                            <span className={`text-sm font-medium px-2 rounded-full ${getStockStatusClass(selectedItem.status)}`}>{selectedItem.status}</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-whiteGray p-4 rounded-lg">
                        <h5 className="text-md font-semibold text-DarkBlue mb-2">Pricing</h5>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-sm text-mainGray">Unit Price:</span>
                            <span className="text-sm font-medium text-DarkBlue">{formatPrice(selectedItem.price)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-mainGray">Total Value:</span>
                            <span className="text-sm font-medium text-DarkBlue">{formatPrice(selectedItem.price * selectedItem.currentStock)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="w-full md:w-2/3 space-y-6">
                  <div>
                    <h5 className="text-md font-semibold text-DarkBlue mb-2">Description</h5>
                    <p className="text-sm text-mainGray">{selectedItem.description}</p>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h5 className="text-md font-semibold text-DarkBlue mb-2">Details</h5>
                      <div className="bg-whiteGray p-4 rounded-lg space-y-3">
                        <div>
                          <span className="text-xs text-mainGray block">Category</span>
                          <span className="text-sm text-DarkBlue">{selectedItem.category} / {selectedItem.subcategory}</span>
                        </div>
                        <div>
                          <span className="text-xs text-mainGray block">Location</span>
                          <span className="text-sm text-DarkBlue">{selectedItem.location}</span>
                        </div>
                        <div>
                          <span className="text-xs text-mainGray block">Batch Number</span>
                          <span className="text-sm text-DarkBlue">{selectedItem.batchNumber}</span>
                        </div>
                        <div>
                          <span className="text-xs text-mainGray block">Usage Rate</span>
                          <span className="text-sm text-DarkBlue">{selectedItem.usageRate}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <h5 className="text-md font-semibold text-DarkBlue mb-2">Dates</h5>
                      <div className="bg-whiteGray p-4 rounded-lg space-y-3">
                        <div>
                          <span className="text-xs text-mainGray block">Last Restocked</span>
                          <span className="text-sm text-DarkBlue">{selectedItem.lastRestocked}</span>
                        </div>
                        <div>
                          <span className="text-xs text-mainGray block">Expiry Date</span>
                          <span className="text-sm text-DarkBlue">{selectedItem.expiryDate || 'N/A'}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h5 className="text-md font-semibold text-DarkBlue mb-2">Supplier Information</h5>
                    <div className="bg-whiteGray p-4 rounded-lg">
                      <div className="flex items-center mb-2">
                        <div className="h-10 w-10 rounded-full bg-mainBlue/10 flex items-center justify-center text-mainBlue font-bold mr-3">
                          {selectedItem.supplier.charAt(0)}
                        </div>
                        <div>
                          <span className="text-sm font-medium text-DarkBlue block">{selectedItem.supplier}</span>
                          <span className="text-xs text-mainGray">Preferred Supplier</span>
                        </div>
                      </div>
                      <div className="mt-2 flex space-x-2">
                        <button className="px-3 py-1.5 text-xs bg-whiteGray border border-mainGray/30 text-mainGray rounded-md hover:bg-gray-100 transition-colors">
                          View Supplier Details
                        </button>
                        <button className="px-3 py-1.5 text-xs bg-whiteGray border border-mainGray/30 text-mainGray rounded-md hover:bg-gray-100 transition-colors">
                          Contact Supplier
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-8 flex justify-end space-x-3">
                <button 
                  className="px-4 py-2 border border-mainGray/30 text-mainGray rounded-lg hover:bg-whiteGray transition-colors"
                  onClick={() => setSelectedItem(null)}
                >
                  Close
                </button>
                <button 
                  className="px-4 py-2 bg-mainBlue text-white rounded-lg hover:bg-mainBlue/90 transition-colors flex items-center"
                  onClick={() => setShowOrderModal(true)}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  Order Item
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Order Modal */}
      {selectedItem && showOrderModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-md">
            <div className="p-6 border-b border-gray-100 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-DarkBlue">Order Item</h3>
              <button 
                className="text-mainGray hover:text-DarkBlue"
                onClick={() => setShowOrderModal(false)}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-6">
              <div className="flex items-center mb-6">
                <div className="h-16 w-16 rounded-lg bg-mainBlue/10 flex items-center justify-center text-mainBlue font-bold text-xl mr-4">
                  {selectedItem.name.charAt(0)}
                </div>
                <div>
                  <h4 className="text-lg font-semibold text-DarkBlue">{selectedItem.name}</h4>
                  <p className="text-sm text-mainGray">{selectedItem.id}</p>
                </div>
              </div>
              
              <div className="space-y-4 mb-6">
                <div className="bg-whiteGray p-4 rounded-lg">
                  <div className="flex justify-between mb-2">
                    <span className="text-sm text-mainGray">Current Stock:</span>
                    <span className="text-sm font-medium text-DarkBlue">{selectedItem.currentStock} {selectedItem.unit}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-mainGray">Unit Price:</span>
                    <span className="text-sm font-medium text-DarkBlue">{formatPrice(selectedItem.price)}</span>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-DarkBlue mb-2">Order Quantity</label>
                  <div className="flex items-center">
                    <button 
                      className="h-10 w-10 rounded-l-lg border border-gray-300 flex items-center justify-center text-mainGray hover:bg-gray-100 transition-colors"
                      onClick={() => setOrderQuantity(Math.max(1, orderQuantity - 1))}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                      </svg>
                    </button>
                    <input 
                      type="number" 
                      min="1"
                      value={orderQuantity}
                      onChange={(e) => setOrderQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                      className="h-10 border-t border-b border-gray-300 text-center w-20 focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                    />
                    <button 
                      className="h-10 w-10 rounded-r-lg border border-gray-300 flex items-center justify-center text-mainGray hover:bg-gray-100 transition-colors"
                      onClick={() => setOrderQuantity(orderQuantity + 1)}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </button>
                  </div>
                </div>
                
                <div className="bg-whiteGray p-4 rounded-lg">
                  <div className="flex justify-between mb-1">
                    <span className="text-sm text-mainGray">Subtotal:</span>
                    <span className="text-sm font-medium text-DarkBlue">{formatPrice(selectedItem.price * orderQuantity)}</span>
                  </div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm text-mainGray">Tax (18%):</span>
                    <span className="text-sm font-medium text-DarkBlue">{formatPrice(selectedItem.price * orderQuantity * 0.18)}</span>
                  </div>
                  <div className="flex justify-between pt-2 border-t border-gray-200 mt-2">
                    <span className="text-sm font-medium text-DarkBlue">Total:</span>
                    <span className="text-sm font-medium text-DarkBlue">{formatPrice(selectedItem.price * orderQuantity * 1.18)}</span>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-DarkBlue mb-2">Notes</label>
                  <textarea 
                    className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-mainBlue/50 h-24 resize-none"
                    placeholder="Add any special instructions or notes for this order..."
                  ></textarea>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button 
                  className="px-4 py-2 border border-mainGray/30 text-mainGray rounded-lg hover:bg-whiteGray transition-colors"
                  onClick={() => setShowOrderModal(false)}
                >
                  Cancel
                </button>
                <button 
                  className="px-4 py-2 bg-mainBlue text-white rounded-lg hover:bg-mainBlue/90 transition-colors"
                  onClick={handleOrderSubmit}
                >
                  Place Order
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Add Item Modal */}
      {showAddItemModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-100 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-DarkBlue">Add New Inventory Item</h3>
              <button 
                className="text-mainGray hover:text-DarkBlue"
                onClick={() => setShowAddItemModal(false)}
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <form onSubmit={handleAddItem} className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
                {/* Basic Information */}
                <div className="space-y-4 md:col-span-2">
                  <h4 className="font-medium text-DarkBlue">Basic Information</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Item Name <span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        name="name"
                        value={newItem.name}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Category <span className="text-red-500">*</span></label>
                      <select
                        name="category"
                        value={newItem.category}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      >
                        <option value="PPE">PPE</option>
                        <option value="Medication">Medication</option>
                        <option value="Equipment">Equipment</option>
                        <option value="Supplies">Supplies</option>
                        <option value="Instruments">Instruments</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Subcategory</label>
                      <input
                        type="text"
                        name="subcategory"
                        value={newItem.subcategory}
                        onChange={handleInputChange}
                        placeholder="e.g. Face Protection, Antibiotics, etc."
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Description</label>
                      <input
                        type="text"
                        name="description"
                        value={newItem.description}
                        onChange={handleInputChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                  </div>
                </div>
                
                {/* Stock Information */}
                <div className="space-y-4 md:col-span-2">
                  <h4 className="font-medium text-DarkBlue">Stock Information</h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Current Stock <span className="text-red-500">*</span></label>
                      <input
                        type="number"
                        name="currentStock"
                        value={newItem.currentStock}
                        onChange={handleNumberInputChange}
                        required
                        min="0"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Unit <span className="text-red-500">*</span></label>
                      <select
                        name="unit"
                        value={newItem.unit}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      >
                        <option value="pieces">Pieces</option>
                        <option value="boxes">Boxes</option>
                        <option value="packs">Packs</option>
                        <option value="bottles">Bottles</option>
                        <option value="vials">Vials</option>
                        <option value="units">Units</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Status</label>
                      <select
                        name="status"
                        value={newItem.status}
                        onChange={handleInputChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      >
                        <option value="In Stock">In Stock</option>
                        <option value="Low Stock">Low Stock</option>
                        <option value="Out of Stock">Out of Stock</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Minimum Stock Level</label>
                      <input
                        type="number"
                        name="minStockLevel"
                        value={newItem.minStockLevel}
                        onChange={handleNumberInputChange}
                        min="0"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Reorder Point</label>
                      <input
                        type="number"
                        name="reorderPoint"
                        value={newItem.reorderPoint}
                        onChange={handleNumberInputChange}
                        min="0"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Location</label>
                      <input
                        type="text"
                        name="location"
                        value={newItem.location}
                        onChange={handleInputChange}
                        placeholder="e.g. Main Storage - Shelf A3"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                  </div>
                </div>
                
                {/* Additional Information */}
                <div className="space-y-4 md:col-span-2">
                  <h4 className="font-medium text-DarkBlue">Additional Information</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Supplier</label>
                      <input
                        type="text"
                        name="supplier"
                        value={newItem.supplier}
                        onChange={handleInputChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Expiry Date</label>
                      <input
                        type="date"
                        name="expiryDate"
                        value={newItem.expiryDate}
                        onChange={handleInputChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Price (USD)</label>
                      <input
                        type="number"
                        name="price"
                        value={newItem.price}
                        onChange={handleNumberInputChange}
                        min="0"
                        step="0.01"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-mainGray mb-1">Batch Number</label>
                      <input
                        type="text"
                        name="batchNumber"
                        value={newItem.batchNumber}
                        onChange={handleInputChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      />
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-8 flex justify-end space-x-3">
                <button 
                  type="button"
                  onClick={() => setShowAddItemModal(false)}
                  className="px-4 py-2 border border-mainGray/30 text-mainGray rounded-lg hover:bg-whiteGray transition-colors"
                >
                  Cancel
                </button>
                <button 
                  type="submit"
                  className="px-4 py-2 bg-mainBlue text-white rounded-lg hover:bg-mainBlue/90 transition-colors"
                >
                  Add Item
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </DashboardLayout>
  );
}
