'use client';

import { useState, useEffect } from 'react';
import axios from 'axios';
import DashboardLayout from '../../components/layout/DashboardLayout';
import { useAuth } from '../../context/AuthContext';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { Bar } from 'react-chartjs-2';

// Register ChartJS components
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);

export default function ReportsPage() {
  const { user } = useAuth();
  const hospitalId = user?.hospitalId;
  
  // Basic state management
  const [activeReportType, setActiveReportType] = useState('financial');
  const [startDate, setStartDate] = useState('2025-04-01');
  const [endDate, setEndDate] = useState('2025-05-06');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Data state
  const [financialData, setFinancialData] = useState(null);
  const [patientStats, setPatientStats] = useState(null);
  
  // Fetch reports data from backend API
  useEffect(() => {
    if (!hospitalId) return;
    
    const fetchReportsData = async () => {
      setIsLoading(true);
      try {
        // Fetch financial data
        const financialResponse = await axios.get('/api/reports/financial', {
          params: { 
            hospital: hospitalId,
            startDate,
            endDate
          }
        });
        
        // Fetch patient statistics
        const patientResponse = await axios.get('/api/reports/patients', {
          params: { 
            hospital: hospitalId,
            startDate,
            endDate
          }
        });
        
        // Fetch department performance
        const departmentResponse = await axios.get('/api/reports/departments', {
          params: { 
            hospital: hospitalId,
            startDate,
            endDate
          }
        });
        
        // Set data from API responses
        setFinancialData(financialResponse.data.data.financialData);
        setPatientStats(patientResponse.data.data.patientStats);
        setDepartmentPerformance(departmentResponse.data.data.departmentPerformance);
        setError(null);
      } catch (err) {
        console.error('Error fetching reports data:', err);
        setError('Failed to load reports data. Please try again later.');
        // Fallback to sample data for demo purposes
        setFinancialData({
    revenue: {
      total: 1250000,
      byDepartment: {
        cardiology: 320000,
        neurology: 280000,
        orthopedics: 250000,
        pediatrics: 180000,
        dermatology: 120000,
        ophthalmology: 100000,
      },
      byMonth: {
        'Jan': 95000,
        'Feb': 98000,
        'Mar': 105000,
        'Apr': 110000,
      }
    },
    expenses: {
      total: 850000,
      byCategory: {
        salaries: 450000,
        medications: 150000,
        equipment: 120000,
        utilities: 80000,
        maintenance: 50000,
      },
      byMonth: {
        'Jan': 70000,
        'Feb': 72000,
        'Mar': 75000,
        'Apr': 78000,
      }
    },
    profit: {
      total: 400000,
      byMonth: {
        'Jan': 25000,
        'Feb': 26000,
        'Mar': 30000,
        'Apr': 32000,
      }
    }
  };
  
  // Continue the fetchReportsData function to include fallback data
        setPatientStats({
    totalPatients: 12500,
    newPatients: {
      total: 450,
      byMonth: {
        'Jan': 110,
        'Feb': 105,
        'Mar': 120,
        'Apr': 115,
      }
    },
    appointments: {
      total: 3200,
      completed: 2800,
      cancelled: 250,
      noShow: 150,
      byDepartment: {
        cardiology: 650,
        neurology: 580,
        orthopedics: 520,
        pediatrics: 480,
        dermatology: 320,
        ophthalmology: 250,
      }
    },
    admissions: {
      total: 850,
      emergency: 320,
      planned: 530,
      averageStay: 4.2,
      byDepartment: {
        cardiology: 220,
        neurology: 180,
        orthopedics: 150,
        pediatrics: 120,
        dermatology: 80,
        ophthalmology: 100,
      }
    }
  };
  
        setDepartmentPerformance({
    cardiology: {
      revenue: 320000,
      expenses: 220000,
      profit: 100000,
      patientsSeen: 650,
      averageRating: 4.7,
      topProcedures: ['ECG', 'Echocardiogram', 'Stress Test', 'Cardiac Catheterization']
    },
    neurology: {
      revenue: 280000,
      expenses: 190000,
      profit: 90000,
      patientsSeen: 580,
      averageRating: 4.5,
      topProcedures: ['EEG', 'MRI', 'Lumbar Puncture', 'EMG']
    },
    orthopedics: {
      revenue: 250000,
      expenses: 170000,
      profit: 80000,
      patientsSeen: 520,
      averageRating: 4.6,
      topProcedures: ['Joint Replacement', 'Fracture Repair', 'Arthroscopy', 'Physical Therapy']
    },
    pediatrics: {
      revenue: 180000,
      expenses: 130000,
      profit: 50000,
      patientsSeen: 480,
      averageRating: 4.8,
      topProcedures: ['Vaccinations', 'Well-Child Visits', 'Ear Infection Treatment', 'Asthma Management']
    },
    dermatology: {
      revenue: 120000,
      expenses: 80000,
      profit: 40000,
      patientsSeen: 320,
      averageRating: 4.4,
      topProcedures: ['Skin Biopsy', 'Acne Treatment', 'Mole Removal', 'Eczema Treatment']
    },
    ophthalmology: {
      revenue: 100000,
      expenses: 70000,
      profit: 30000,
      patientsSeen: 250,
      averageRating: 4.5,
      topProcedures: ['Eye Exam', 'Cataract Surgery', 'Glaucoma Treatment', 'LASIK']
    }
  });
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchReportsData();
  }, [hospitalId, startDate, endDate]);
  
  // Format currency
  const formatCurrency = (amount) => {
    if (!amount && amount !== 0) return '-';
    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
  };
  
  // Handle export report
  const handleExportReport = () => {
    setExportInProgress(true);
    
    // Simulate export process
    setTimeout(() => {
      setExportInProgress(false);
      setShowExportModal(false);
      
      // Show success message
      alert(`Report exported successfully in ${exportFormat.toUpperCase()} format!`);
    }, 2000);
  };
  
  return (
    <DashboardLayout title="Hospital Reports">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
          <div>
            <h2 className="text-xl font-semibold text-DarkBlue">Reports & Analytics</h2>
            <p className="text-mainGray">View and analyze hospital performance metrics</p>
          </div>
          <button 
            onClick={() => setShowExportModal(true)}
            className="bg-gradient-to-r from-mainBlue to-deepBlue text-white px-4 py-2 rounded-lg flex items-center justify-center hover:shadow-lg transition-all duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
            </svg>
            Export Reports
          </button>
        </div>
        
        {/* Report Type Tabs */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          {isLoading ? (
            <div className="flex justify-center items-center py-16">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-mainBlue"></div>
            </div>
          ) : error ? (
            <div className="text-center py-16 text-red-500">
              <p>{error}</p>
              <button 
                onClick={() => window.location.reload()} 
                className="mt-2 text-mainBlue hover:underline"
              >
                Try again
              </button>
            </div>
          ) : (
          <>
          <div className="border-b border-gray-200 mb-6 overflow-x-auto pb-1">
            <div className="flex flex-nowrap md:flex-wrap min-w-max md:min-w-0 -mb-px">
              <button
                onClick={() => setActiveReportType('financial')}
                className={`mr-2 md:mr-4 py-2 md:py-3 px-3 md:px-4 inline-flex items-center border-b-2 text-sm md:text-base whitespace-nowrap ${
                  activeReportType === 'financial'
                    ? 'border-mainBlue text-mainBlue'
                    : 'border-transparent text-mainGray hover:text-DarkBlue hover:border-mainGray'
                }`}
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Financial Reports
              </button>
              <button
                onClick={() => setActiveReportType('patients')}
                className={`mr-2 md:mr-4 py-2 md:py-3 px-3 md:px-4 inline-flex items-center border-b-2 text-sm md:text-base whitespace-nowrap ${
                  activeReportType === 'patients'
                    ? 'border-mainBlue text-mainBlue'
                    : 'border-transparent text-mainGray hover:text-DarkBlue hover:border-mainGray'
                }`}
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Patient Statistics
              </button>
              <button
                onClick={() => setActiveReportType('departments')}
                className={`mr-2 md:mr-4 py-2 md:py-3 px-3 md:px-4 inline-flex items-center border-b-2 text-sm md:text-base whitespace-nowrap ${
                  activeReportType === 'departments'
                    ? 'border-mainBlue text-mainBlue'
                    : 'border-transparent text-mainGray hover:text-DarkBlue hover:border-mainGray'
                }`}
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                Department Performance
              </button>
              <button
                onClick={() => setActiveReportType('inventory')}
                className={`mr-2 md:mr-4 py-2 md:py-3 px-3 md:px-4 inline-flex items-center border-b-2 text-sm md:text-base whitespace-nowrap ${
                  activeReportType === 'inventory'
                    ? 'border-mainBlue text-mainBlue'
                    : 'border-transparent text-mainGray hover:text-DarkBlue hover:border-mainGray'
                }`}
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
                </svg>
                Inventory Reports
              </button>
            </div>
          </div>
          
          {/* Filter Controls */}
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0 mb-6">
            <div className="flex flex-wrap gap-2 w-full md:w-auto">
              <select
                value={timePeriod}
                onChange={(e) => setTimePeriod(e.target.value)}
                className="bg-whiteGray px-4 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
              >
                <option value="week">Last Week</option>
                <option value="month">Last Month</option>
                <option value="quarter">Last Quarter</option>
                <option value="year">Last Year</option>
                <option value="custom">Custom Range</option>
              </select>
              
              {timePeriod === 'custom' && (
                <div className="flex gap-2">
                  <div className="flex flex-col">
                    <label className="text-xs text-mainGray mb-1">Start Date</label>
                    <input
                      type="date"
                      value={startDate}
                      onChange={(e) => setStartDate(e.target.value)}
                      className="bg-whiteGray px-4 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                    />
                  </div>
                  <div className="flex flex-col">
                    <label className="text-xs text-mainGray mb-1">End Date</label>
                    <input
                      type="date"
                      value={endDate}
                      onChange={(e) => setEndDate(e.target.value)}
                      className="bg-whiteGray px-4 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                    />
                  </div>
                </div>
              )}
              
              {(activeReportType === 'financial' || activeReportType === 'patients' || activeReportType === 'departments') && (
                <select
                  value={departmentFilter}
                  onChange={(e) => setDepartmentFilter(e.target.value)}
                  className="bg-whiteGray px-4 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                >
                  <option value="all">All Departments</option>
                  <option value="cardiology">Cardiology</option>
                  <option value="neurology">Neurology</option>
                  <option value="orthopedics">Orthopedics</option>
                  <option value="pediatrics">Pediatrics</option>
                  <option value="dermatology">Dermatology</option>
                  <option value="ophthalmology">Ophthalmology</option>
                </select>
              )}
            </div>
            
            <div className="flex space-x-2">
              <button className="bg-whiteGray text-mainGray px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
                Filter
              </button>
              <button className="bg-whiteGray text-mainGray px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </button>
            </div>
          </div>
          
          {/* Report Content */}
          {activeReportType === 'financial' && (
            <div className="space-y-6">
              {/* Financial Summary Cards */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div className="bg-whiteGray p-6 rounded-lg">
                  <div className="flex items-center mb-4">
                    <div className="h-12 w-12 rounded-lg bg-green-100 flex items-center justify-center text-green-600 mr-4">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-sm text-mainGray">Total Revenue</h3>
                      <p className="text-2xl font-semibold text-DarkBlue">{formatCurrency(financialData.revenue.total)}</p>
                    </div>
                  </div>
                  <div className="text-xs text-mainGray flex items-center">
                    <svg className="w-4 h-4 text-green-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                    </svg>
                    <span>8.2% increase from last period</span>
                  </div>
                </div>
                
                <div className="bg-whiteGray p-6 rounded-lg">
                  <div className="flex items-center mb-4">
                    <div className="h-12 w-12 rounded-lg bg-red-100 flex items-center justify-center text-red-600 mr-4">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-sm text-mainGray">Total Expenses</h3>
                      <p className="text-2xl font-semibold text-DarkBlue">{formatCurrency(financialData.expenses.total)}</p>
                    </div>
                  </div>
                  <div className="text-xs text-mainGray flex items-center">
                    <svg className="w-4 h-4 text-red-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
                    </svg>
                    <span>3.5% increase from last period</span>
                  </div>
                </div>
                
                <div className="bg-whiteGray p-6 rounded-lg">
                  <div className="flex items-center mb-4">
                    <div className="h-12 w-12 rounded-lg bg-blue-100 flex items-center justify-center text-blue-600 mr-4">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-sm text-mainGray">Net Profit</h3>
                      <p className="text-2xl font-semibold text-DarkBlue">{formatCurrency(financialData.profit.total)}</p>
                    </div>
                  </div>
                  <div className="text-xs text-mainGray flex items-center">
                    <svg className="w-4 h-4 text-green-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                    </svg>
                    <span>12.3% increase from last period</span>
                  </div>
                </div>
              </div>
              
              {/* Revenue by Department */}
              <div className="bg-white p-4 md:p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-semibold text-DarkBlue mb-4">Revenue by Department</h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-whiteGray">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">Department</th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">Revenue</th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">% of Total</th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">YoY Growth</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {Object.entries(financialData.revenue.byDepartment).map(([dept, amount]) => (
                        <tr key={dept} className="hover:bg-whiteGray/50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-DarkBlue capitalize">{dept}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-DarkBlue">{formatCurrency(amount)}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-DarkBlue">{((amount / financialData.revenue.total) * 100).toFixed(1)}%</div>
                            <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                              <div className="bg-mainBlue h-2.5 rounded-full" style={{ width: `${(amount / financialData.revenue.total) * 100}%` }}></div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-green-600 flex items-center">
                              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                              </svg>
                              {Math.random() * 10 + 5}%
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
              
              {/* Expense Breakdown */}
              <div className="bg-white p-4 md:p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-semibold text-DarkBlue mb-4">Expense Breakdown</h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-whiteGray">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">Category</th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">Amount</th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">% of Total</th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-mainGray uppercase tracking-wider">YoY Change</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {Object.entries(financialData.expenses.byCategory).map(([category, amount]) => (
                        <tr key={category} className="hover:bg-whiteGray/50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-DarkBlue capitalize">{category}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-DarkBlue">{formatCurrency(amount)}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-DarkBlue">{((amount / financialData.expenses.total) * 100).toFixed(1)}%</div>
                            <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                              <div className="bg-red-500 h-2.5 rounded-full" style={{ width: `${(amount / financialData.expenses.total) * 100}%` }}></div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-red-600 flex items-center">
                              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
                              </svg>
                              {Math.random() * 5 + 1}%
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
              
              {/* Monthly Trend */}
              <div className="bg-white p-4 md:p-6 rounded-lg shadow-sm">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-4">
                  <h3 className="text-lg font-semibold text-DarkBlue">Monthly Financial Trend</h3>
                  <div className="flex space-x-2 mt-2 md:mt-0">
                    <button className="px-3 py-1 text-sm rounded-md bg-mainBlue text-white">Line</button>
                    <button className="px-3 py-1 text-sm rounded-md bg-whiteGray text-mainGray">Bar</button>
                    <button className="px-3 py-1 text-sm rounded-md bg-whiteGray text-mainGray">Area</button>
                  </div>
                </div>
                <div className="h-80 bg-white rounded-lg p-4">
                  <Line
                    data={{
                      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                      datasets: [
                        {
                          label: 'Revenue',
                          data: [95000, 98000, 105000, 110000, 112000, 115000],
                          borderColor: '#3A8EF6', // mainBlue
                          backgroundColor: 'rgba(58, 142, 246, 0.1)',
                          tension: 0.4,
                          pointBackgroundColor: '#3A8EF6',
                          pointBorderColor: '#fff',
                          pointBorderWidth: 2,
                          pointRadius: 4,
                          pointHoverRadius: 6,
                        },
                        {
                          label: 'Expenses',
                          data: [70000, 72000, 75000, 78000, 80000, 82000],
                          borderColor: '#F87171', // red-400
                          backgroundColor: 'rgba(248, 113, 113, 0.1)',
                          tension: 0.4,
                          pointBackgroundColor: '#F87171',
                          pointBorderColor: '#fff',
                          pointBorderWidth: 2,
                          pointRadius: 4,
                          pointHoverRadius: 6,
                        },
                        {
                          label: 'Profit',
                          data: [25000, 26000, 30000, 32000, 32000, 33000],
                          borderColor: '#6F3AFA', // deepBlue
                          backgroundColor: 'rgba(111, 58, 250, 0.1)',
                          tension: 0.4,
                          pointBackgroundColor: '#6F3AFA',
                          pointBorderColor: '#fff',
                          pointBorderWidth: 2,
                          pointRadius: 4,
                          pointHoverRadius: 6,
                        }
                      ],
                    }}
                    options={{
                      responsive: true,
                      maintainAspectRatio: false,
                      plugins: {
                        legend: {
                          position: 'top',
                          align: 'end',
                          labels: {
                            usePointStyle: true,
                            boxWidth: 8,
                            padding: 20,
                            font: {
                              size: 12,
                            },
                          },
                        },
                        tooltip: {
                          backgroundColor: 'rgba(3, 20, 50, 0.8)', // DarkBlue with opacity
                          titleFont: {
                            size: 14,
                          },
                          bodyFont: {
                            size: 13,
                          },
                          padding: 12,
                          cornerRadius: 8,
                          displayColors: false,
                          callbacks: {
                            label: function(context) {
                              return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                            }
                          }
                        },
                      },
                      scales: {
                        x: {
                          grid: {
                            display: false,
                          },
                          ticks: {
                            color: '#6C87AE', // mainGray
                          },
                        },
                        y: {
                          grid: {
                            color: 'rgba(226, 237, 255, 0.5)', // whiteGray with opacity
                          },
                          ticks: {
                            color: '#6C87AE', // mainGray
                            callback: function(value) {
                              return formatCurrency(value);
                            }
                          },
                          beginAtZero: true,
                        },
                      },
                    }}
                  />
                </div>
                <div className="mt-4 flex justify-between items-center">
                  <div className="text-sm text-mainGray">
                    <span className="font-medium text-DarkBlue">Total Revenue:</span> {formatCurrency(financialData.revenue.total)}
                  </div>
                  <div className="flex space-x-2">
                    <button className="px-3 py-1 text-xs rounded-md bg-whiteGray text-mainGray flex items-center">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                      </svg>
                      Export Chart
                    </button>
                    <button className="px-3 py-1 text-xs rounded-md bg-whiteGray text-mainGray flex items-center">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      View Full Report
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Patient Statistics Section - Placeholder */}
          {activeReportType === 'patients' && (
            <div className="space-y-6">
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-semibold text-DarkBlue mb-4">Patient Statistics</h3>
                <p className="text-mainGray">Patient statistics content will be implemented here.</p>
              </div>
            </div>
          )}
          
          {/* Department Performance Section - Placeholder */}
          {activeReportType === 'departments' && (
            <div className="space-y-6">
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-semibold text-DarkBlue mb-4">Department Performance</h3>
                <p className="text-mainGray">Department performance content will be implemented here.</p>
              </div>
            </div>
          )}
          
          {/* Inventory Reports Section - Placeholder */}
          {activeReportType === 'inventory' && (
            <div className="space-y-6">
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-semibold text-DarkBlue mb-4">Inventory Reports</h3>
                <p className="text-mainGray">Inventory reports content will be implemented here.</p>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Export Report Modal */}
      {showExportModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-md">
            <div className="p-6 border-b border-gray-100 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-DarkBlue">Export Report</h3>
              <button 
                className="text-mainGray hover:text-DarkBlue"
                onClick={() => setShowExportModal(false)}
                disabled={exportInProgress}
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="p-6">
              <div className="mb-6">
                <label className="block text-sm font-medium text-mainGray mb-2">Report Type</label>
                <select 
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                  value={activeReportType}
                  onChange={(e) => setActiveReportType(e.target.value)}
                  disabled={exportInProgress}
                >
                  <option value="financial">Financial Report</option>
                  <option value="patients">Patient Statistics</option>
                  <option value="departments">Department Performance</option>
                </select>
              </div>
              
              <div className="mb-6">
                <label className="block text-sm font-medium text-mainGray mb-2">Date Range</label>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-xs text-mainGray mb-1">Start Date</label>
                    <input
                      type="date"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      value={startDate}
                      onChange={(e) => setStartDate(e.target.value)}
                      disabled={exportInProgress}
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-mainGray mb-1">End Date</label>
                    <input
                      type="date"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-mainBlue/50"
                      value={endDate}
                      onChange={(e) => setEndDate(e.target.value)}
                      disabled={exportInProgress}
                    />
                  </div>
                </div>
              </div>
              
              <div className="mb-6">
                <label className="block text-sm font-medium text-mainGray mb-2">Export Format</label>
                <div className="flex space-x-4">
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="exportFormat"
                      value="pdf"
                      checked={exportFormat === 'pdf'}
                      onChange={() => setExportFormat('pdf')}
                      disabled={exportInProgress}
                      className="mr-2 text-mainBlue focus:ring-mainBlue"
                    />
                    <span className="text-sm text-DarkBlue">PDF</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="exportFormat"
                      value="excel"
                      checked={exportFormat === 'excel'}
                      onChange={() => setExportFormat('excel')}
                      disabled={exportInProgress}
                      className="mr-2 text-mainBlue focus:ring-mainBlue"
                    />
                    <span className="text-sm text-DarkBlue">Excel</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="exportFormat"
                      value="csv"
                      checked={exportFormat === 'csv'}
                      onChange={() => setExportFormat('csv')}
                      disabled={exportInProgress}
                      className="mr-2 text-mainBlue focus:ring-mainBlue"
                    />
                    <span className="text-sm text-DarkBlue">CSV</span>
                  </label>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3 mt-8">
                <button 
                  type="button"
                  onClick={() => setShowExportModal(false)}
                  disabled={exportInProgress}
                  className="px-4 py-2 border border-mainGray/30 text-mainGray rounded-lg hover:bg-whiteGray transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Cancel
                </button>
                <button 
                  type="button"
                  onClick={handleExportReport}
                  disabled={exportInProgress}
                  className="px-4 py-2 bg-mainBlue text-white rounded-lg hover:bg-mainBlue/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                >
                  {exportInProgress ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Exporting...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                      </svg>
                      Export
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}
          </>
        )}
      </div>
    </DashboardLayout>
  );
}
